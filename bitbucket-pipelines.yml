# This is a sample build configuration for JavaScript.
# Check our guides at https://confluence.atlassian.com/x/14UWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: node:14

options:
  docker: true
  size: 2x

deploymentScript: &deploymentScript
  script:
    # Download and extract Atlas CLI
    - curl -fL https://statlas.prod.atl-paas.net/atlas-cli/linux/atlas-latest-linux-amd64.tar.gz | tar -xzp atlas
    # Install the Micros plugin
    - ./atlas plugin install -n micros
    # Lastly, run the deployment as normal
    - ./atlas micros service deploy -s my-cool-service -f my-cool-service.sd.yml -e $BITBUCKET_DEPLOYMENT_ENVIRONMENT

pipelines:
  default:
    - step:
        caches:
          - node
        script: # Modify the commands below to build your repository.
          - npm install
          - npm run test
          - npm run build
  branches:
    master:
      - step:
          name: Build docker image
          script:
            # Used for accessing packages.atlassian.com
            - pipe: docker://atlassian/artifactory-sidekick:latest
              variables:
                COMPLIANT: "true"
            - source .artifactory/activate.sh
            # set up step variables and auth data
            - export DOCKER_URL="docker-proxy.services.atlassian.com"
            - echo $PIPELINES_JWT_TOKEN | docker login -u=sox --password-stdin docker-proxy.services.atlassian.com
            # build base image (node@alpine + python dependencies + hugo)
            - docker build --tag="${DOCKER_URL}/sox/atlassian/ep-tool:${BITBUCKET_BUILD_NUMBER}" .
            - docker push "${DOCKER_URL}/sox/atlassian/ep-tool:${BITBUCKET_BUILD_NUMBER}"
          services:
            - docker
          caches:
            - docker
      - step:
          name: Deploy to staging
          deployment: adev
          script:
            # set up step variables and auth data
            - export DOCKER_URL="docker-proxy.services.atlassian.com"
            - export MICROS_TOKEN="$MICROS_TOKEN:$PIPELINES_JWT_TOKEN"
            - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - echo $PIPELINES_JWT_TOKEN | docker login -u=sox --password-stdin docker-proxy.services.atlassian.com
            # Download and extract Atlas CLI
            - curl -fL https://statlas.prod.atl-paas.net/atlas-cli/linux/atlas-latest-linux-amd64.tar.gz | tar -xzp atlas
            # Install the Micros plugin
            - ./atlas plugin install -n micros
            # generate the service descriptor
            - echo "RELEASE_VERSION" > "template-vars.csv"
            - echo "${BITBUCKET_BUILD_NUMBER}" >> "template-vars.csv"
            - npm install mustang
            - $(npm bin)/mustang -t "service-descriptor.template.json" -i "template-vars.csv" > "service-descriptor.json"
            # Lastly, run the deployment as normal
            - ./atlas micros service deploy -s ep-tool -f service-descriptor.json -e $BITBUCKET_DEPLOYMENT_ENVIRONMENT
          services:
            - docker
          caches:
            - docker
      - step:
          name: Deploy to prod
          deployment: prod-east
          trigger: manual
          script:
            # set up step variables and auth data
            - export DOCKER_URL="docker-proxy.services.atlassian.com"
            - export MICROS_TOKEN="$MICROS_TOKEN:$PIPELINES_JWT_TOKEN"
            - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - echo $PIPELINES_JWT_TOKEN | docker login -u=sox --password-stdin docker-proxy.services.atlassian.com
            # Download and extract Atlas CLI
            - curl -fL https://statlas.prod.atl-paas.net/atlas-cli/linux/atlas-latest-linux-amd64.tar.gz | tar -xzp atlas
            # Install the Micros plugin
            - ./atlas plugin install -n micros
            # generate the service descriptor
            - echo "RELEASE_VERSION" > "template-vars.csv"
            - echo "${BITBUCKET_BUILD_NUMBER}" >> "template-vars.csv"
            - npm install mustang
            - $(npm bin)/mustang -t "service-descriptor.template.json" -i "template-vars.csv" > "service-descriptor.json"
            # Lastly, run the deployment as normal
            - ./atlas micros service deploy -s ep-tool -f service-descriptor.json -e $BITBUCKET_DEPLOYMENT_ENVIRONMENT
          services:
            - docker
          caches:
            - docker
